---
# This playbook has been generated by the `validation init` CLI.
#
# As shown here in this template, the validation playbook requires three
# top-level directive:
#   ``hosts``, ``vars -> metadata`` and ``roles``.
#
# ``hosts``: specifies which nodes to run the validation on. The options can
#            be ``all`` (run on all nodes), or you could use the hosts defined
#            in the inventory.
# ``vars``: this section serves for storing variables that are going to be
#           available to the Ansible playbook. The validations API uses the
#           ``metadata`` section to read each validation's name and description
#           These values are then reported by the API.
#
# The validations can be grouped together by specyfying a ``groups`` metadata.
# Groups function similar to tags and a validation can thus be part of many
# groups. To get a full list of the groups available and their description,
# please run the following command on your Ansible Controller host:
#
#    $ validation show group
#
# The validations can also be categorized by technical domain and acan belong to
# one or multiple ``categories``. For example, if your validation checks some
# networking related configuration, you may want to put ``networking`` as a
# category.  Note that this section is open and you are free to categorize your
# validations as you like.
#
# The ``products`` section refers to the product on which you would like to run
# the validation. It's another way to categorized your community validations.
# Note that, by default, ``community`` is set in the ``products`` section to
# help you list your validations by filtering by products:
#
#    $ validation list --product community
#
- hosts: all
  gather_facts: false
  vars:
    metadata:
      name: Verify package on RedHat os_family
      description: |
        This validation will run `rpm --verify' on RedHat OS family and
        returns the status.
        If selected package isn't installed, it will fail.
        If selected package doesn't have the %verify scriptlet, it won't fail.
      groups:
        - prep
        - pre-deployment
        - pre-ugrade
        - post-upgrade
        - pre-system-upgrade
        - post-system-upgrade
        - pre-undercloud-upgrade
        - post-undercloud-upgrade
        - pre-overcloud-upgrade
        - post-overcloud-upgrade
        - pre-update
        - post-update
      categories:
        - package
      products:
        - common
  roles:
    - verify_package
